local ExcludeAccountsList = {} -- List of accounts names to exclude from inventorylocal show = falselocal temp_inventory = nillocal temp_weight = nillocal temp_maxWeight = nillocal cooldown = 0isInInventory = false--opens inventory with keypressCitizen.CreateThread(function()	while true do		Citizen.Wait(0)		if IsControlJustReleased(0, Config.OpenKey) and IsInputDisabled(0) then			openInventory()		end	end	while false do		Citizen.Wait(0)		if IsControlJustReleased(0, Config.OpenKey) and IsInputDisabled(0) then			closeInventory()		end	endend)function openInventory()	TriggerServerEvent("inventoryHud:loadPlayerInventory")    isInInventory = true    SendNUIMessage({        action = "display",        type = "normal"    })    SetNuiFocus(true, true)endfunction closeInventory()    isInInventory = false    SendNUIMessage({        action = "hide"    })    SetNuiFocus(false, false)endRegisterNUICallback("NUIFocusOff", function()    closeInventory()end)RegisterNetEvent("inventoryHud:loadPlayerInventory")AddEventHandler('inventoryHud:loadPlayerInventory', function(data)        items = {}        inventory = data.inventory        --accounts = data.accounts        --money = self.remote.getMoney()        --weapons = data.weapons        if Config.IncludeCash and money ~= nil and money > 0 then            --for key, value in pairs(accounts) do                moneyData = {                    label = "cash",                    name = "cash",                    type = "item_money",                    count = money,                    usable = false,                    rare = false,                    limit = -1,                    canRemove = true                }                table.insert(items, moneyData)           -- end        end        if Config.IncludeAccounts and accounts ~= nil then            for key, value in pairs(accounts) do                if not shouldSkipAccount(accounts[key].name) then                    local canDrop = accounts[key].name ~= "bank"                    if accounts[key].money > 0 then                        accountData = {                            label = accounts[key].label,                            count = accounts[key].money,                            type = "item_account",                            name = accounts[key].name,                            usable = false,                            rare = false,                            limit = -1,                            canRemove = canDrop                        }                        table.insert(items, accountData)                    end                end            end        end        if inventory ~= nil then            for key, value in pairs(inventory) do                if inventory[key].count <= 0 then                    inventory[key] = nil                else                    inventory[key].type = "item_standard"                    table.insert(items, inventory[key])                end            end        end        if Config.IncludeWeapons and weapons ~= nil then            for key, value in pairs(weapons) do                local weaponHash = GetHashKey(weapons[key].name)                local playerPed = PlayerPedId()                if HasPedGotWeapon(playerPed, weaponHash, false) and weapons[key].name ~= "WEAPON_UNARMED" then                    local ammo = GetAmmoInPedWeapon(playerPed, weaponHash)                    table.insert(items, {                        label = weapons[key].label,                        count = ammo,                        limit = -1,                        type = "item_weapon",                        name = weapons[key].name,                        usable = false,                        rare = false,                        canRemove = true                    })                end            end        end		local action = "setItems"        local itemList = items		            SendNUIMessage(                {                    action = "setItems",                    itemList = items                }            )		end)RegisterNUICallback("GetNearPlayers", function(data)TriggerServerEvent("inventoryHud:getNearPlayer", data)end)RegisterNUICallback("GiveItem", function(data)		local count = tonumber(data.number)        TriggerServerEvent("inventoryHud:giveItem", data.player, data.item.name, count)        Wait(500)        TriggerServerEvent("inventoryHud:loadPlayerInventory")end)RegisterNetEvent("inventoryHud:returnNear")AddEventHandler('inventoryHud:returnNear', function(found, elements, item)    if not found then	print("Not Found")    else        SendNUIMessage({            action = "nearPlayers",            foundAny = foundPlayers,            players = elements,            item = item        })    endend)RegisterNUICallback("UseItem", function(data)	local count = tonumber(data.number)	TriggerServerEvent("inventoryHud:useItem", data.item.name, count)    Citizen.Wait(500)    TriggerServerEvent("inventoryHud:loadPlayerInventory")end)RegisterNetEvent("inventoryHud:closeMenu")AddEventHandler('inventoryHud:closeMenu', function()closeInventory()end)RegisterNUICallback("DropItem", function(data)    if IsPedSittingInAnyVehicle(playerPed) then return end    if type(data.number) == "number" and math.floor(data.number) == data.number then    TriggerServerEvent("inventoryHud:dropItem", data.item.name, data.number)    end    Wait(500)    TriggerServerEvent("inventoryHud:loadPlayerInventory")end)RegisterNetEvent("inventoryHud:objectForAnimation")AddEventHandler("inventoryHud:objectForAnimation",function(type)    local ped = GetPlayerPed(-1)    DeleteObject(object)    bone = GetPedBoneIndex(ped, 60309)    coords = GetEntityCoords(ped)    modelHash = GetHashKey(type)    RequestModel(modelHash)    object = CreateObject(modelHash, coords.x, coords.y, coords.z, true, true, false)    AttachEntityToEntity(object, ped, bone, 0.1, 0.0, 0.0, 1.0, 1.0, 1.0, 1, 1, 0, 0, 2, 1)    Citizen.Wait(2500)    DeleteObject(object)end)Citizen.CreateThread(function()    while true do        Citizen.Wait(1)        if isInInventory then            local playerPed = PlayerPedId()            DisableControlAction(0, 1, true) -- Disable pan            DisableControlAction(0, 2, true) -- Disable tilt            DisableControlAction(0, 24, true) -- Attack            DisableControlAction(0, 257, true) -- Attack 2            DisableControlAction(0, 25, true) -- Aim            DisableControlAction(0, 263, true) -- Melee Attack 1            DisableControlAction(0, Keys["W"], true) -- W            DisableControlAction(0, Keys["A"], true) -- A            DisableControlAction(0, 31, true) -- S (fault in Keys table!)            DisableControlAction(0, 30, true) -- D (fault in Keys table!)            DisableControlAction(0, Keys["R"], true) -- Reload            DisableControlAction(0, Keys["SPACE"], true) -- Jump            DisableControlAction(0, Keys["Q"], true) -- Cover            DisableControlAction(0, Keys["TAB"], true) -- Select Weapon            DisableControlAction(0, Keys["F"], true) -- Also 'enter'?            DisableControlAction(0, Keys["F1"], true) -- Disable phone            DisableControlAction(0, Keys["F2"], true) -- Inventory            DisableControlAction(0, Keys["F3"], true) -- Animations            DisableControlAction(0, Keys["F6"], true) -- Job            DisableControlAction(0, Keys["F5"], true) -- Job            DisableControlAction(0, Keys["F7"], true) -- Job            DisableControlAction(0, Keys["F9"], true) -- Job            DisableControlAction(0, Keys["F10"], true) -- Job            DisableControlAction(0, Keys["V"], true) -- Disable changing view            DisableControlAction(0, Keys["C"], true) -- Disable looking behind            DisableControlAction(0, Keys["X"], true) -- Disable clearing animation            DisableControlAction(2, Keys["P"], true) -- Disable pause screen            DisableControlAction(0, 59, true) -- Disable steering in vehicle            DisableControlAction(0, 71, true) -- Disable driving forward in vehicle            DisableControlAction(0, 72, true) -- Disable reversing in vehicle            DisableControlAction(2, Keys["LEFTCTRL"], true) -- Disable going stealth            DisableControlAction(0, 47, true) -- Disable weapon            DisableControlAction(0, 264, true) -- Disable melee            DisableControlAction(0, 257, true) -- Disable melee            DisableControlAction(0, 140, true) -- Disable melee            DisableControlAction(0, 141, true) -- Disable melee            DisableControlAction(0, 142, true) -- Disable melee            DisableControlAction(0, 143, true) -- Disable melee            DisableControlAction(0, 75, true) -- Disable exit vehicle            DisableControlAction(27, 75, true) -- Disable exit vehicle        end    endend)